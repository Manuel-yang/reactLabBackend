image: node:latest

# Pipeline
stages:
  - install
  - build
  - test
  - staging
  - ContinuousDelivery
  - ContinuousDeployment

variables:
   npm_config_cache: "$CI_PROJECT_DIR/.npm"
#    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

cache:
   key:
     files:
        - package.json
   paths:
      - .npm
      # - cache/Cypress
      - node_modules


# Jobs 
install_dependencies:
  stage: install
  script:
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - node_modules/

bundle_app:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - build/

# exercise_job:
#   stage: exercise_job
#   only:
#     - main
#   script:
#     - echo "New job for exercise"
    

test4component:
# Node docker image with Cypress and Chrome pre-installed
  # image: cypress/browsers:node12.14.1-chrome85-ff81
  stage: test
  script:
    - echo "Run tests for component"
    - npm run test

deploy_staging:
  image: ruby:latest
  stage: staging
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING --api-key=$HEROKU_API_KEY
    - echo "Deployed to staging server"


  ContinuousDelivery:
  image: ruby:latest
  stage: ContinuousDelivery
  only:
    - develop
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING_TEST --api-key=$HEROKU_API_KEY
    - echo "Deployed to testing server"
  when: manual
  ContinuousDeployment:
  image: ruby:latest
  stage: ContinuousDeployment
  only:
    - main
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING_TEST --api-key=$HEROKU_API_KEY
    - echo "Deployed to testing server"